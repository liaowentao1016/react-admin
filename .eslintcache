[{"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\api\\index.js":"1","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\store\\reducer.js":"2","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\components\\header\\index.js":"3","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\components\\left-nav\\index.js":"4","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\index.js":"5","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\login\\Login.jsx":"6","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\charts\\Line.jsx":"7","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\category\\Category.jsx":"8","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\goods\\c-cpns\\AddUpdata.jsx":"9","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\utils\\local-data.js":"10","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\store\\actionCreators.js":"11","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\role\\Role.jsx":"12","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\admin\\Admin.jsx":"13","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\goods\\c-cpns\\PictureUpload.jsx":"14","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\home\\Home.jsx":"15","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\store\\constants.js":"16","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\utils\\formatDate.js":"17","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\api\\axios.js":"18","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\charts\\Bar.jsx":"19","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\goods\\Goods.jsx":"20","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\user\\User.jsx":"21","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\goods\\c-cpns\\Home.jsx":"22","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\charts\\Pie.jsx":"23","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\not-found\\NotFound.jsx":"24","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\router\\index.js":"25"},{"size":2989,"mtime":1609680250404,"results":"26","hashOfConfig":"27"},{"size":742,"mtime":1609825499267,"results":"28","hashOfConfig":"27"},{"size":2557,"mtime":1609906922685,"results":"29","hashOfConfig":"27"},{"size":3690,"mtime":1609906922685,"results":"30","hashOfConfig":"27"},{"size":345,"mtime":1609906922686,"results":"31","hashOfConfig":"27"},{"size":3180,"mtime":1609906922687,"results":"32","hashOfConfig":"27"},{"size":2674,"mtime":1609912961150,"results":"33","hashOfConfig":"27"},{"size":7458,"mtime":1609212305950,"results":"34","hashOfConfig":"27"},{"size":7664,"mtime":1609505595765,"results":"35","hashOfConfig":"27"},{"size":1453,"mtime":1609043258101,"results":"36","hashOfConfig":"27"},{"size":1226,"mtime":1609906922689,"results":"37","hashOfConfig":"27"},{"size":5842,"mtime":1609828034314,"results":"38","hashOfConfig":"27"},{"size":1096,"mtime":1609906922687,"results":"39","hashOfConfig":"27"},{"size":3590,"mtime":1609830974942,"results":"40","hashOfConfig":"27"},{"size":217,"mtime":1609913473628,"results":"41","hashOfConfig":"27"},{"size":118,"mtime":1609906922689,"results":"42","hashOfConfig":"27"},{"size":464,"mtime":1609043258100,"results":"43","hashOfConfig":"27"},{"size":383,"mtime":1609212305947,"results":"44","hashOfConfig":"27"},{"size":698,"mtime":1609912679064,"results":"45","hashOfConfig":"27"},{"size":198,"mtime":1609505595764,"results":"46","hashOfConfig":"27"},{"size":7712,"mtime":1609680250407,"results":"47","hashOfConfig":"27"},{"size":5107,"mtime":1609505595766,"results":"48","hashOfConfig":"27"},{"size":1229,"mtime":1609913350671,"results":"49","hashOfConfig":"27"},{"size":610,"mtime":1609913770193,"results":"50","hashOfConfig":"27"},{"size":2743,"mtime":1609914456283,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pkpdzo",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\api\\index.js",[],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\store\\reducer.js",[],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\components\\header\\index.js",[],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\components\\left-nav\\index.js",["107"],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\index.js",[],["108","109"],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\login\\Login.jsx",[],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\charts\\Line.jsx",[],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\category\\Category.jsx",["110"],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\goods\\c-cpns\\AddUpdata.jsx",["111"],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\utils\\local-data.js",[],["112","113"],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\store\\actionCreators.js",[],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\role\\Role.jsx",[],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\admin\\Admin.jsx",[],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\goods\\c-cpns\\PictureUpload.jsx",[],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\home\\Home.jsx",[],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\store\\constants.js",[],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\utils\\formatDate.js",[],["114","115"],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\api\\axios.js",[],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\charts\\Bar.jsx",[],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\goods\\Goods.jsx",[],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\user\\User.jsx",["116"],"import React, { memo, useEffect, useRef, useState } from \"react\";\r\n\r\nimport {\r\n  Card,\r\n  Button,\r\n  Table,\r\n  Tooltip,\r\n  message,\r\n  Modal,\r\n  Form,\r\n  Select,\r\n  Input\r\n} from \"antd\";\r\nimport {\r\n  EditOutlined,\r\n  DeleteOutlined,\r\n  ExclamationCircleOutlined\r\n} from \"@ant-design/icons\";\r\n\r\nimport { reqUsers, reqDeleteUser, reqAddUser, reqEditUser } from \"@/api\";\r\n\r\nimport { formatDate } from \"@/utils/formatDate\";\r\n\r\nexport default memo(function LQUser() {\r\n  // state and props\r\n  const [users, setUsers] = useState([]); // 用户列表\r\n  const [roles, setRoles] = useState([]); // 角色列表\r\n  const [columns] = useState([\r\n    { title: \"用户名\", dataIndex: \"username\" },\r\n    { title: \"邮箱\", dataIndex: \"email\" },\r\n    { title: \"电话\", dataIndex: \"phone\" },\r\n    { title: \"邮箱\", dataIndex: \"email\" },\r\n    { title: \"注册时间\", dataIndex: \"create_time\", render: formatDate },\r\n    {\r\n      title: \"所属角色\",\r\n      dataIndex: \"role_id\",\r\n      render: role_id => roleNames.current[role_id]\r\n    },\r\n    {\r\n      title: \"操作\",\r\n      render: user => (\r\n        <div>\r\n          <Tooltip placement=\"top\" title=\"修改\">\r\n            <Button\r\n              type=\"primary\"\r\n              icon={<EditOutlined />}\r\n              size=\"small\"\r\n              style={{ margin: \"0 10px\" }}\r\n              onClick={() => {\r\n                currentUser.current = user;\r\n                userForm.setFieldsValue({\r\n                  username: user.username,\r\n                  password: user.password,\r\n                  phone: user.phone,\r\n                  email: user.email,\r\n                  role_id: user.role_id\r\n                });\r\n                setIsShowModal(true);\r\n              }}\r\n            />\r\n          </Tooltip>\r\n\r\n          <Tooltip placement=\"top\" title=\"删除\">\r\n            <Button\r\n              type=\"primary\"\r\n              icon={<DeleteOutlined />}\r\n              size=\"small\"\r\n              style={{ margin: \"0 10px\" }}\r\n              onClick={() => {\r\n                Modal.confirm({\r\n                  title: `确认删除${user.username}吗？`,\r\n                  icon: <ExclamationCircleOutlined />,\r\n                  content: \"删除将无法恢复\",\r\n                  onOk() {\r\n                    deleteUser(user);\r\n                  }\r\n                });\r\n              }}\r\n            />\r\n          </Tooltip>\r\n        </div>\r\n      )\r\n    }\r\n  ]);\r\n  const [isShowModal, setIsShowModal] = useState(false); // 控制模态的显示与隐藏\r\n  const roleNames = useRef({}); // 所有角色名对象\r\n  const [userForm] = Form.useForm(); // 表单实例对象\r\n  const currentUser = useRef({}); // 当前用户对象\r\n  // hooks\r\n  useEffect(() => {\r\n    getUsers();\r\n  }, []);\r\n  // handle\r\n  async function getUsers() {\r\n    const res = await reqUsers();\r\n    if (res && res.status === 0) {\r\n      const { users, roles } = res.data;\r\n      initRoleNames(roles);\r\n      setUsers(users);\r\n      setRoles(roles);\r\n    }\r\n  }\r\n\r\n  const initRoleNames = roles => {\r\n    roleNames.current = roles.reduce((pre, role) => {\r\n      pre[role._id] = role.name;\r\n      return pre;\r\n    }, {});\r\n  };\r\n\r\n  const deleteUser = async user => {\r\n    const res = await reqDeleteUser(user._id);\r\n    if (res && res.status === 0) {\r\n      setUsers(oldUsers => oldUsers.filter(item => item._id !== user._id));\r\n      message.success(\"删除成功\");\r\n    } else {\r\n      message.error(\"删除失败\");\r\n    }\r\n  };\r\n\r\n  const handleOk = () => {\r\n    // 表单验证\r\n    userForm\r\n      .validateFields()\r\n      .then(async values => {\r\n        let res;\r\n        if (currentUser.current._id) {\r\n          // 修改操作\r\n          delete values.password;\r\n          values._id = currentUser.current._id;\r\n          res = await reqEditUser(values);\r\n        } else {\r\n          // 添加操作\r\n          res = await reqAddUser(values);\r\n        }\r\n        if (res && res.status === 0) {\r\n          // 重新获取最新的用户列表\r\n          getUsers();\r\n          // 隐藏对话框\r\n          setIsShowModal(false);\r\n          // 重置表单\r\n          userForm.resetFields();\r\n          // 提示\r\n          message.success(currentUser.current._id ? \"修改成功\" : \"添加成功\");\r\n          // 清空保存的当前user\r\n          currentUser.current = {};\r\n        } else {\r\n          message.error(res.msg);\r\n        }\r\n      })\r\n      .catch(error => console.log(error));\r\n  };\r\n  // jsx-template\r\n  const title = (\r\n    <Button type=\"primary\" onClick={() => setIsShowModal(true)}>\r\n      创建用户\r\n    </Button>\r\n  );\r\n  // 返回的jsx\r\n  return (\r\n    <Card title={title}>\r\n      <Table\r\n        dataSource={users}\r\n        columns={columns}\r\n        rowKey=\"_id\"\r\n        pagination={{ defaultPageSize: 3 }}\r\n      />\r\n\r\n      {/*添加/修改用户模态框*/}\r\n      <Modal\r\n        forceRender\r\n        title={currentUser.current._id ? \"修改用户\" : \"添加用户\"}\r\n        visible={isShowModal}\r\n        onOk={handleOk}\r\n        onCancel={() => {\r\n          setIsShowModal(false);\r\n          userForm.resetFields();\r\n          currentUser.current = {};\r\n        }}\r\n      >\r\n        <Form form={userForm} labelCol={{ span: 4 }} wrapperCol={{ span: 18 }}>\r\n          <Form.Item\r\n            label=\"用户名\"\r\n            name=\"username\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"用户名不能为空\"\r\n              },\r\n              { min: 4, message: \"用户名长度至少为4位\" },\r\n              { max: 12, message: \"用户名长度最大为12位\" },\r\n              {\r\n                pattern: /^[\\w]+$/,\r\n                message: \"用户名必须由英文、字母、下划线组成\"\r\n              }\r\n            ]}\r\n          >\r\n            <Input placeholder=\"请输入用户名\" />\r\n          </Form.Item>\r\n          {currentUser.current._id ? null : (\r\n            <Form.Item\r\n              label=\"密码\"\r\n              name=\"password\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"密码不能为空\"\r\n                },\r\n                { min: 4, message: \"密码长度至少为4位\" },\r\n                { max: 12, message: \"密码长度最大为12位\" },\r\n                {\r\n                  pattern: /^[\\w]+$/,\r\n                  message: \"密码必须由英文、字母、下划线组成\"\r\n                }\r\n              ]}\r\n            >\r\n              <Input placeholder=\"请输入密码\" type=\"password\" />\r\n            </Form.Item>\r\n          )}\r\n          <Form.Item\r\n            label=\"手机\"\r\n            name=\"phone\"\r\n            rules={[\r\n              {\r\n                pattern: /^1(?:3\\d|4[4-9]|5[0-35-9]|6[67]|7[013-8]|8\\d|9\\d)\\d{8}$/,\r\n                message: \"手机号码不合法\"\r\n              }\r\n            ]}\r\n          >\r\n            <Input placeholder=\"请输入手机号\" />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"邮箱\"\r\n            name=\"email\"\r\n            rules={[\r\n              {\r\n                pattern: /^[A-Za-z0-9\\u4e00-\\u9fa5]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$/,\r\n                message: \"邮箱不合法\"\r\n              }\r\n            ]}\r\n          >\r\n            <Input placeholder=\"请输入邮箱\" />\r\n          </Form.Item>\r\n          <Form.Item label=\"角色\" name=\"role_id\">\r\n            <Select placeholder=\"请选择角色\">\r\n              {roles.map(role => (\r\n                <Select.Option value={role._id} key={role._id}>\r\n                  {role.name}\r\n                </Select.Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </Card>\r\n  );\r\n});\r\n","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\goods\\c-cpns\\Home.jsx",["117"],"import React, { memo, useEffect, useRef, useState } from \"react\";\r\n\r\nimport {\r\n  Card,\r\n  Select,\r\n  Input,\r\n  Button,\r\n  Table,\r\n  Switch,\r\n  Tooltip,\r\n  message\r\n} from \"antd\";\r\n\r\nimport {\r\n  PlusOutlined,\r\n  EditOutlined,\r\n  ApartmentOutlined\r\n} from \"@ant-design/icons\";\r\n\r\nimport { reqGoods, reqSearchList, reqGoodsStatus } from \"@/api\";\r\n\r\nexport default memo(function LQGoodsHome(props) {\r\n  // state and props\r\n  // 表格的数据源\r\n  const [dataSource, setDataSource] = useState([]);\r\n  // 表格列的数据\r\n  const [columns] = useState([\r\n    {\r\n      title: \"商品名称\",\r\n      dataIndex: \"name\",\r\n      ellipsis: true\r\n    },\r\n    {\r\n      title: \"商品描述\",\r\n      dataIndex: \"desc\",\r\n      ellipsis: true\r\n    },\r\n    {\r\n      title: \"价格\",\r\n      dataIndex: \"price\",\r\n      render: price => \"￥\" + price\r\n    },\r\n    {\r\n      title: \"状态\",\r\n      dataIndex: \"status\",\r\n      render: (status, product) => (\r\n        <Switch\r\n          checkedChildren=\"在售\"\r\n          unCheckedChildren=\"下架\"\r\n          defaultChecked={status === 1}\r\n          onChange={checked => statusChange(checked, product)}\r\n          loading={statusLoading}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      title: \"操作\",\r\n      render: good => (\r\n        <div>\r\n          <Tooltip placement=\"top\" title=\"详情\">\r\n            <Button\r\n              type=\"primary\"\r\n              icon={<ApartmentOutlined />}\r\n              size=\"small\"\r\n              onClick={() => props.history.push(\"/admin/goods/detail\", good)}\r\n            />\r\n          </Tooltip>\r\n          <Tooltip placement=\"top\" title=\"修改\">\r\n            <Button\r\n              type=\"primary\"\r\n              icon={<EditOutlined />}\r\n              size=\"small\"\r\n              style={{ margin: \"0 10px\" }}\r\n              onClick={() => props.history.push(\"/admin/goods/addupdata\", good)}\r\n            />\r\n          </Tooltip>\r\n        </div>\r\n      )\r\n    }\r\n  ]);\r\n  // 商品列表的参数对象\r\n  const [params, setParams] = useState({ pageNum: 1, pageSize: 5 });\r\n  // 搜索商品列表的参数类型\r\n  const [searchType, setSearchType] = useState(\"productName\");\r\n  // 搜索商品列表参数\r\n  const searchParams = useRef({});\r\n  // 总的记录条数\r\n  const [total, setTotal] = useState(0);\r\n  // 加载数据时的loading状态\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  // 更新状态的loading状态\r\n  const [statusLoading, setStatusLoading] = useState(false);\r\n\r\n  // hooks\r\n  useEffect(() => {\r\n    getGoodList();\r\n  }, [params, total]);\r\n\r\n  // handle\r\n  // 获取商品列表\r\n  async function getGoodList() {\r\n    setIsLoading(true);\r\n    let res;\r\n    if (searchParams.current.productName || searchParams.current.productDesc) {\r\n      res = await reqSearchList(searchParams.current);\r\n    } else {\r\n      res = await reqGoods(params);\r\n    }\r\n\r\n    if (res && res.status === 0) {\r\n      setDataSource(res.data.list);\r\n      setTotal(res.data.total);\r\n      setIsLoading(false);\r\n    } else {\r\n      message.error(\"获取商品列表失败\");\r\n    }\r\n  }\r\n  // 确认搜索\r\n  const onSearch = async value => {\r\n    setParams({ ...params, pageNum: 1 });\r\n    // 设置最新的搜索参数对象\r\n    searchParams.current = { ...params, pageNum: 1, [searchType]: value };\r\n    getGoodList();\r\n  };\r\n  // 下拉框发生改变\r\n  const onSelect = value => {\r\n    // 改变搜素商品列表的参数类型\r\n    setSearchType(value);\r\n  };\r\n  // 页码改变的回调\r\n  const pageNumChange = pageNum => {\r\n    setParams({ ...params, pageNum });\r\n  };\r\n  // 状态变化时的回调 (更新状态)\r\n  const statusChange = async (checked, product) => {\r\n    setStatusLoading(true);\r\n    const res = await reqGoodsStatus({\r\n      productId: product._id,\r\n      status: checked\r\n    });\r\n    if (res && res.status === 0) {\r\n      message.success(\"更新状态成功\");\r\n    } else {\r\n      message.error(\"更新状态失败\");\r\n    }\r\n    setStatusLoading(false);\r\n  };\r\n  // jsx-template\r\n  const title = (\r\n    <div>\r\n      <Select defaultValue={searchType} onSelect={onSelect}>\r\n        <Select.Option value=\"productName\">按名称搜索</Select.Option>\r\n        <Select.Option value=\"productDesc\">按描述搜索</Select.Option>\r\n      </Select>\r\n      <Input.Search\r\n        placeholder=\"请输入关键字\"\r\n        style={{ width: 200, marginLeft: 20 }}\r\n        allowClear\r\n        enterButton\r\n        onSearch={onSearch}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  const extra = (\r\n    <Button\r\n      type=\"primary\"\r\n      icon={<PlusOutlined />}\r\n      onClick={() => props.history.push(\"/admin/goods/addupdata\")}\r\n    >\r\n      添加\r\n    </Button>\r\n  );\r\n  // 返回的jsx\r\n  return (\r\n    <Card title={title} extra={extra}>\r\n      <Table\r\n        dataSource={dataSource}\r\n        columns={columns}\r\n        bordered\r\n        rowKey=\"_id\"\r\n        loading={isLoading}\r\n        pagination={{\r\n          showQuickJumper: true,\r\n          total,\r\n          current: params.pageNum,\r\n          pageSize: params.pageSize,\r\n          onChange: pageNumChange\r\n        }}\r\n      />\r\n    </Card>\r\n  );\r\n});\r\n","E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\charts\\Pie.jsx",[],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\pages\\not-found\\NotFound.jsx",[],"E:\\web前端教学视频\\个人练习\\react后台管理系统\\react-admin-client\\src\\router\\index.js",[],{"ruleId":"118","severity":1,"message":"119","line":36,"column":30,"nodeType":"120","messageId":"121","endLine":36,"endColumn":32},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":42,"column":6,"nodeType":"128","endLine":42,"endColumn":16,"suggestions":"129"},{"ruleId":"126","severity":1,"message":"130","line":44,"column":6,"nodeType":"128","endLine":44,"endColumn":22,"suggestions":"131"},{"ruleId":"122","replacedBy":"132"},{"ruleId":"124","replacedBy":"133"},{"ruleId":"122","replacedBy":"134"},{"ruleId":"124","replacedBy":"135"},{"ruleId":"126","severity":1,"message":"136","line":92,"column":6,"nodeType":"128","endLine":92,"endColumn":8,"suggestions":"137"},{"ruleId":"126","severity":1,"message":"138","line":97,"column":6,"nodeType":"128","endLine":97,"endColumn":21,"suggestions":"139"},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-native-reassign",["140"],"no-negated-in-lhs",["141"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCategoryList'. Either include it or remove the dependency array.","ArrayExpression",["142"],"React Hook useEffect has a missing dependency: 'getCategoryValues'. Either include it or remove the dependency array.",["143"],["140"],["141"],["140"],["141"],"React Hook useEffect has a missing dependency: 'getUsers'. Either include it or remove the dependency array.",["144"],"React Hook useEffect has a missing dependency: 'getGoodList'. Either include it or remove the dependency array.",["145"],"no-global-assign","no-unsafe-negation",{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},"Update the dependencies array to be: [getCategoryList, parentId]",{"range":"154","text":"155"},"Update the dependencies array to be: [firstCategorys, getCategoryValues]",{"range":"156","text":"157"},"Update the dependencies array to be: [getUsers]",{"range":"158","text":"159"},"Update the dependencies array to be: [getGoodList, params, total]",{"range":"160","text":"161"},[1131,1141],"[getCategoryList, parentId]",[1148,1164],"[firstCategorys, getCategoryValues]",[2593,2595],"[getUsers]",[2360,2375],"[getGoodList, params, total]"]